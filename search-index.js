var searchIndex = new Map(JSON.parse('[\
["foundry_fork_db",{"t":"EEEEECCCPIIIFGPPPPIIIPGPPIISGPFPPIIIPPIIPPPNNONNONNNNOOONNNNNNNNNNONNNNNNNNONNNNNNNNNNNNNNNNNNONNNNNNNNNNNNONOONNNNNNNNNNNNONNONNNNNNNNNNNNNNNNFFFFFFINNNNOONONNNNNNNNNNNNNOOONNNNNNNNNNNOONNONNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNOONNNNNNNNONNNNNNNNNNNNNNNNNNNNNPGIPPPPPPPPPPNNNNNNNNNNNNNNNNN","n":["BackendHandler","BlockchainDb","DatabaseError","DatabaseResult","SharedBackend","backend","cache","error","Account","AccountFuture","AccountInfoSender","AddressData","BackendHandler","BackendRequest","Basic","Block","BlockHash","BlockHash","BlockHashData","BlockHashFuture","BlockHashSender","BlockInPlace","BlockingMode","FullBlock","FullBlock","FullBlockFuture","FullBlockSender","NON_ARCHIVE_NODE_WARNING","ProviderRequest","SetPinnedBlock","SharedBackend","Storage","Storage","StorageData","StorageFuture","StorageSender","Transaction","Transaction","TransactionFuture","TransactionSender","UpdateAddress","UpdateBlockHash","UpdateStorage","__clone_box","__clone_box","account_requests","accounts","accounts_len","backend","basic_ref","block_hash_ref","block_hashes","block_hashes_len","block_id","block_requests","blocking_mode","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cache","clone","clone","clone_into","clone_into","clone_to_uninit","clone_to_uninit","code_by_hash_ref","data","db","default","do_get_basic","do_get_block_hash","do_get_storage","eq","flush_cache","flush_cache_to","fmt","fmt","fmt","from","from","from","from","from","get_account_req","get_full_block","get_transaction","incoming","insert_or_update_address","insert_or_update_block_hashes","insert_or_update_storage","into","into","into","into","into","into_future","new","new","on_request","pending_requests","poll","provider","queued_requests","request_account","request_account_storage","request_full_block","request_hash","request_transaction","run","set_pinned_block","spawn_backend","spawn_backend_thread","storage","storage_len","storage_ref","storage_requests","to_owned","to_owned","transport","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","with_blocking_mode","BlockchainDb","BlockchainDbMeta","FlushJsonBlockCacheDB","JsonBlockCacheDB","JsonBlockCacheData","MemDb","StorageInfo","__clone_box","__clone_box","__clone_box","accounts","accounts","block_env","block_hashes","block_hashes","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cache","cache","cache_path","cfg_env","clear","clone","clone","clone","clone_into","clone_into","clone_into","clone_to_uninit","clone_to_uninit","clone_to_uninit","commit","data","data","db","db","db","default","deserialize","deserialize","do_commit","do_insert_account","drop","eq","equivalent","equivalent","flush","flush_to","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hosts","into","into","into","into","into","into","is_transient","load","meta","meta","meta","meta","new","new","new","new_db","new_skip_check","serialize","serialize","storage","storage","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","BlockNotFound","DatabaseError","DatabaseResult","Err","GetAccount","GetBlockHash","GetFullBlock","GetStorage","GetTransaction","MissingCode","Ok","Recv","Send","borrow","borrow_mut","fmt","fmt","from","from","from","from","from","get_rpc_error","into","is_possibly_non_archive_node_error","source","to_string","try_from","try_into","type_id"],"q":[[0,"foundry_fork_db"],[8,"foundry_fork_db::backend"],[143,"foundry_fork_db::cache"],[256,"foundry_fork_db::error"],[286,"dyn_clone::sealed"],[287,"alloy_primitives::bits::address"],[288,"revm_primitives::state"],[289,"std::collections::hash::map"],[290,"core::option"],[291,"core::result"],[292,"alloy_primitives::aliases"],[293,"ruint::aliases"],[294,"revm_primitives::bytecode"],[295,"alloc::sync"],[296,"std::path"],[297,"core::fmt"],[298,"eyre"],[299,"alloy_transport::trait"],[300,"core::clone"],[301,"alloy_network::any"],[302,"alloy_provider::provider::trait"],[303,"core::marker"],[304,"alloy_rpc_types_eth::block"],[305,"alloy_eips::eip1898"],[306,"core::convert"],[307,"alloy_rpc_types_eth::transaction"],[308,"alloy_serde::other"],[309,"futures_channel::mpsc"],[310,"core::pin"],[311,"core::task::wake"],[312,"core::task::poll"],[313,"std::sync::mpsc"],[314,"core::ops::function"],[315,"core::any"],[316,"parking_lot::rwlock"],[317,"serde::de"],[318,"revm_primitives::env"],[319,"alloc::string"],[320,"serde::ser"],[321,"core::error"]],"i":[0,0,0,0,0,0,0,0,27,0,0,0,0,0,22,15,27,22,0,0,0,15,0,27,22,0,0,0,0,22,0,27,22,0,0,0,27,22,0,0,22,22,22,15,4,25,4,4,4,4,4,4,4,25,25,4,27,25,22,15,4,27,25,22,15,4,4,15,4,15,4,15,4,4,4,25,15,4,4,4,15,4,4,22,15,4,27,25,22,15,4,25,4,4,25,4,4,4,27,25,22,15,4,25,25,4,25,25,25,25,25,25,25,25,25,25,15,4,4,4,4,4,4,25,15,4,25,27,25,22,15,4,27,25,22,15,4,27,25,22,15,4,4,0,0,0,0,0,0,0,39,52,17,39,17,52,39,17,39,52,17,51,55,56,39,52,17,51,55,56,39,39,51,52,17,39,52,17,39,52,17,39,52,17,17,51,55,39,51,39,17,52,55,17,17,56,52,52,52,51,51,39,52,17,51,55,56,39,52,17,51,55,56,52,39,52,17,51,55,56,51,51,39,51,39,55,39,52,51,39,39,52,55,39,17,39,52,17,39,52,17,51,55,56,39,52,17,51,55,56,39,52,17,51,55,56,61,0,0,19,61,61,61,61,61,61,19,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61],"f":"```````````````````````````````````````````{{bd}f}0`{{{b{h}}}{{n{jl}}}}{{{b{h}}}A`}`{{{b{h}}j}{{Ad{{Ab{l}}c}}}{}}{{{b{h}}Af}{{Ad{Ahc}}}{}}{{{b{h}}}{{n{AjAh}}}}3```{b{{b{c}}}{}}0000{{{b{Al}}}{{b{Alc}}}{}}0000`{{{b{An}}}An}{{{b{h}}}h}{{b{b{Alc}}}f{}}0{bf}0{{{b{h}}Ah}{{Ad{B`c}}}{}}{{{b{h}}}{{Bd{Bb}}}}`{{}An}{{{b{h}}j}{{Bf{{Ab{l}}}}}}{{{b{h}}Af}{{Bf{Ah}}}}{{{b{h}}jAj}{{Bf{Aj}}}}{{{b{An}}{b{An}}}Bh}{{{b{h}}}f}{{{b{h}}{b{Bj}}}f}{{{b{Bl}}{b{AlBn}}}C`}{{{b{An}}{b{AlBn}}}C`}{{{b{h}}{b{AlBn}}}C`}{cc{}}0000{{{b{{Cb{ce}}}}j}{{Cf{Cd}}}{ChCj}{{Cn{cCl}}CjD`}}{{{b{h}}c}{{Bf{Db}}}{{Df{Dd}}}}{{{b{h}}Ah}{{Bf{{Dj{Dh}}}}}}`{{{b{h}}{n{jl}}}f}{{{b{h}}{n{AjAh}}}f}{{{b{h}}{n{jDl}}}f}{{}c{}}0000{{}}{{eDn{E`{Bl}}{Ab{Dd}}}{{Cb{ce}}}{ChCj}{{Cn{cCl}}CjD`}}{{eDn{Ab{Dd}}}{{Eb{h{Cb{ce}}}}}{ChCjD`}{{Cn{cCl}}D`Cj}}{{{b{Al{Cb{ce}}}}Bl}f{ChCj}{{Cn{cCl}}CjD`}}`{{{Ed{{b{Al{Cb{ce}}}}}}{b{AlEf}}}{{Eh{g}}}{ChCjD`}{{Cn{cCl}}CjD`}{}}``{{{b{Al{Cb{ce}}}}j{Ej{{Bf{l}}}}}f{ChCj}{{Cn{cCl}}CjD`}}{{{b{Al{Cb{ce}}}}jAj{Ej{{Bf{Aj}}}}}f{ChCj}{{Cn{cCl}}CjD`}}{{{b{Al{Cb{ce}}}}Dd{Ej{{Bf{Db}}}}}f{ChCj}{{Cn{cCl}}CjD`}}{{{b{Al{Cb{ce}}}}Af{Ej{{Bf{Ah}}}}}f{ChCj}{{Cn{cCl}}CjD`}}{{{b{Al{Cb{ce}}}}Ah{Ej{{Bf{{Dj{Dh}}}}}}}f{ChCj}{{Cn{cCl}}CjD`}}{{{b{An}}e}c{}{{En{}{{El{c}}}}}}{{{b{h}}c}{{F`{f}}}{{Df{Dd}}}}{{eDn{Ab{Dd}}}h{ChCjD`}{{Cn{cCl}}D`Cj}}0{{{b{h}}}{{n{jDl}}}}{{{b{h}}}A`}{{{b{h}}jAj}{{Ad{Ajc}}}{}}`{bc{}}0`{c{{Ad{e}}}{}{}}0000{{}{{Ad{c}}}{}}0000{bFb}0000{{{b{h}}An}h}```````{{bd}f}00{{{b{Dn}}}{{b{{Fd{{n{jl}}}}}}}}``{{{b{Dn}}}{{b{{Fd{{n{AjAh}}}}}}}}`{b{{b{c}}}{}}00000{{{b{Al}}}{{b{Alc}}}{}}00000{{{b{Dn}}}{{b{{Bd{Ff}}}}}}```{{{b{Bb}}}f}{{{b{Dn}}}Dn}{{{b{Fh}}}Fh}{{{b{Bb}}}Bb}{{b{b{Alc}}}f{}}00{bf}00{{{b{AlBb}}{n{jFj}}}f}``{{{b{Dn}}}{{b{{Bd{Bb}}}}}}{{{b{Ff}}}{{b{{Bd{Bb}}}}}}`{{}Bb}{c{{Ad{Fh}}}Fl}{c{{Ad{Fn}}}Fl}{{{b{Bb}}{n{jFj}}}f}{{{b{Bb}}jl}f}{{{b{AlG`}}}f}{{{b{Fh}}{b{Fh}}}Bh}{{b{b{c}}}Bh{}}0{{{b{Ff}}}f}{{{b{Ff}}{b{Bj}}}f}{{{b{Dn}}{b{AlBn}}}C`}{{{b{Fh}}{b{AlBn}}}C`}{{{b{Bb}}{b{AlBn}}}C`}{{{b{Ff}}{b{AlBn}}}C`}{{{b{Fn}}{b{AlBn}}}C`}{{{b{G`}}{b{AlBn}}}C`}{cc{}}00000`{{}c{}}00000{{{b{Ff}}}Bh}{c{{F`{Ff}}}{{Df{Gb}}}}{{{b{Dn}}}{{b{{Bd{{Fd{Fh}}}}}}}}{{{b{Ff}}}{{b{{Bd{{Fd{Fh}}}}}}}}``{{Fh{Ab{Gb}}}Dn}{{GdGf}Fh}{{{Bd{{Fd{Fh}}}}{Ab{Gb}}}Ff}{{Fh{Ab{Gb}}Bh}Dn}3{{{b{Fh}}c}AdGh}{{{b{Fn}}c}AdGh}{{{b{Dn}}}{{b{{Fd{{n{jDl}}}}}}}}`{bc{}}00{c{{Ad{e}}}{}{}}00000{{}{{Ad{c}}}{}}00000{bFb}00000`````````````{b{{b{c}}}{}}{{{b{Al}}}{{b{Alc}}}{}}{{{b{Gj}}{b{AlBn}}}C`}0{cc{}}{GlGj}{GnGj}{{{H`{c}}}Gj{}}{HbGj}{{{b{Gj}}}{{Ab{{b{Cd}}}}}}{{}c{}}{{{b{Gj}}}Bh}{{{b{Gj}}}{{Ab{{b{Hd}}}}}}{bGf}?>=","D":"O`","p":[[1,"reference"],[5,"Private",286],[1,"unit"],[5,"SharedBackend",8],[5,"Address",287],[5,"AccountInfo",288],[5,"HashMap",289],[1,"usize"],[6,"Option",290],[6,"Result",291],[1,"u64"],[8,"B256",292],[8,"U256",293],[0,"mut"],[6,"BlockingMode",8],[6,"Bytecode",294],[5,"MemDb",143],[5,"Arc",295],[8,"DatabaseResult",256],[1,"bool"],[5,"Path",296],[6,"BackendRequest",8],[5,"Formatter",297],[8,"Result",297],[5,"BackendHandler",8],[5,"Report",298],[6,"ProviderRequest",8],[10,"Transport",299],[10,"Clone",300],[5,"AnyNetwork",301],[10,"Provider",302],[10,"Unpin",303],[5,"Block",304],[6,"BlockId",305],[10,"Into",306],[5,"Transaction",307],[5,"WithOtherFields",308],[8,"StorageInfo",143],[5,"BlockchainDb",143],[5,"Receiver",309],[1,"tuple"],[5,"Pin",310],[5,"Context",311],[6,"Poll",312],[5,"Sender",313],[17,"Output"],[10,"FnOnce",314],[8,"Result",298],[5,"TypeId",315],[8,"RwLock",316],[5,"JsonBlockCacheDB",143],[5,"BlockchainDbMeta",143],[5,"Account",288],[10,"Deserializer",317],[5,"JsonBlockCacheData",143],[5,"FlushJsonBlockCacheDB",143],[5,"PathBuf",296],[5,"Env",318],[5,"String",319],[10,"Serializer",320],[6,"DatabaseError",256],[5,"RecvError",313],[5,"SendError",309],[5,"TrySendError",309],[6,"Infallible",306],[10,"Error",321]],"r":[[0,8],[1,143],[2,256],[3,256],[4,8]],"b":[[271,"impl-Display-for-DatabaseError"],[272,"impl-Debug-for-DatabaseError"],[274,"impl-From%3CRecvError%3E-for-DatabaseError"],[275,"impl-From%3CSendError%3E-for-DatabaseError"],[276,"impl-From%3CTrySendError%3CT%3E%3E-for-DatabaseError"],[277,"impl-From%3CInfallible%3E-for-DatabaseError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAKYAJAABAAQACAAEABEAAAATAAIAGAAAABoAAQAgAAAAIgADACcAAQAsAAEAMgABADkACQBEAAYATQAEAFQAAgBoAAEAbQABAHsAAAB9ABEAlgADAJwAAACfAAsArgAAALAACQC7AAAAvwACAMMABADKAAUA4gAAAOYAAADoAAEA7AAVAAUBBQAMAQUAEwEEABoBBAA="}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
